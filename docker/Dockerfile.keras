# To build:
#
#    docker build -f Dockerfile.keras -t rcasero_keras .
#
# To run:
#
#    docker run --runtime=nvidia -i -t rcasero_keras /bin/bash
#
# This will build a container with a sudo user $USERNAME (see below), and temporary password
# $USERNAME. The first time the user is prompted for their password, s/he will be asked to
# change it.

FROM nvidia/cuda:10.0-devel-ubuntu18.04

################################################################################################
## variables to be edited by the user
ARG USERNAME=rcasero

################################################################################################
## root space

USER root
WORKDIR /root
 
RUN apt-get update
RUN apt-get -y install curl python3 ssh sudo less emacs
 
RUN curl -O https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh
RUN bash Anaconda3-5.2.0-Linux-x86_64.sh -b -p /opt/anaconda3
 
ENV PATH="/opt/anaconda3/bin:${PATH}"
RUN conda update -n base conda

RUN which conda
RUN ls -lh /opt/

# build tools
RUN apt install -y cmake

# manually provide options for keyboard-configuration, so that the install doesn't go into
# interactive mode.
#
# Note: You can see which options need to be set with
# "debconf-get-selections | grep keyboard-configuration"
RUN echo "keyboard-configuration keyboard-configuration/layout select English (UK)" > /tmp/preseed.txt
RUN echo "keyboard-configuration keyboard-configuration/variant select English (UK)" >> /tmp/preseed.txt
RUN export DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
    && debconf-set-selections /tmp/preseed.txt \
    && apt install -y keyboard-configuration

# install X server so that we can make plots with matplotlib.
RUN apt install -y xbase-clients

# create user, add to sudo group
RUN useradd -ms /bin/bash $USERNAME
RUN adduser $USERNAME sudo

# this sets the username's password equal to the username (e.g. username rcasero, password rcasero).
# Then, it makes the password expired, so that the first time the user tries to e.g. use sudo,
# the user will have to 
RUN echo $USERNAME:$USERNAME | chpasswd
RUN passwd -e $USERNAME

# enable ssh access for the user
RUN echo "AllowUsers $USERNAME" >> /etc/ssh/sshd_config
RUN systemctl enable ssh.service

################################################################################################
## user space

# change from root to user, and change directory to user's home directory
# Note: setting HOME with ENV is a hack. We are force-setting the system's HOME variable. It needs to be
# done this way, because ENV variables get substituted before the build, but HOME doesn't get assigned
# until after the build has started.
# before the build, but HOME
USER $USERNAME
ENV HOME /home/$USERNAME
WORKDIR $HOME
SHELL ["/bin/bash", "-c"]

# create a conda local environment for the user
# Note: ARG is for build time variables only
ARG PYTHON_VERSION=3.6
ARG CONDA_ENV=keras
RUN conda create -y --name $CONDA_ENV python=$PYTHON_VERSION

# set path to the conda local environment. In a normal system, this is set when you do "source activate", but not in
# docker
ENV CONDA_PREFIX $HOME/.conda/envs/$CONDA_ENV
RUN echo CONDA_PREFIX: $CONDA_PREFIX

# install keras and dependencies
# distributed 1.21.8 requires msgpack
RUN source activate $CONDA_ENV \
    && pip install keras tensorflow-gpu pyyaml msgpack \
    && conda install -y cudnn              # to run Keras on GPU \
    && conda install -y h5py               # to save Keras models to disk \
    && conda install -y graphviz           # used by visualization utilities to plot model graphs \
    && pip install cython                  # dependency of mkl-random/mkl-fft via pydot \
    && pip install pydot                   # used by visualization utilities to plot model graphs \
    && pip install pytest                  # for tests

# show the user the name of the environment and packages installed
RUN source activate $CONDA_ENV \
    && conda info --envs \
    && conda list

# we need to manually launch the ssh service as root. This will also trigger the change of the user password
ENTRYPOINT sudo service ssh start && bash
